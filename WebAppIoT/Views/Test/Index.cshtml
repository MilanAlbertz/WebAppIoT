@model WebAppIoT.Controllers.IndexViewModel
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        h1 {
            color: #333;
        }

        .filter {
            margin-bottom: 20px;
        }

        .sensor-status {
            margin-top: 20px; /* Add margin between filter and sensors */
        }

        .gateway-section {
            margin-bottom: 20px; /* Add margin between gateway sections */
        }

        .gateway-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .sensor-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .sensor {
            width: 100px; /* Adjust width as needed */
            height: 100px; /* Adjust height as needed */
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
        }

        .green {
            background-color: #7CFC00; /* Green */
        }

        .red {
            background-color: #FF0000; /* Red */
        }

        .gray {
            background-color: #808080; /* Gray */
        }

        #chartContainer {
            width: 400px; /* Adjust width as needed */
            height: 200px;
            border: 1px solid black; /* Add black border */
            margin-top: 20px; /* Add margin top for spacing */
        }

        .sensorChart {
            width: 100%;
            height: 100%;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
        // Function to set the selected gateway ID in the dropdown
        function setSelectedGateway(gatewayId) {
            var dropdown = document.getElementById("gatewayFilter");
            for (var i = 0; i < dropdown.options.length; i++) {
                if (dropdown.options[i].value === gatewayId.toString()) {
                    dropdown.selectedIndex = i;
                    break;
                }
            }
        }

        // Function to handle filtering sensors
        function filterSensors() {
            var dropdown = document.getElementById("gatewayFilter");
            var selectedGatewayId = dropdown.value;
            window.location.href = '?gatewayId=' + selectedGatewayId;
        }

        // Call setSelectedGateway function on page load to set initial selection
        document.addEventListener("DOMContentLoaded", function () {
            var selectedGatewayId = '@(Context.Request.Query["gatewayId"].ToString())';
            setSelectedGateway(selectedGatewayId);
            if (selectedGatewayId) {
                renderChart();
            }
        });

        // SignalR setup for real-time updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/dataHub")
            .build();

        connection.on("ReceiveDataUpdate", function () {
            console.log("ReceiveDataUpdate event received");
            location.reload(); // Refresh page or update UI as needed
        });

        connection.start().then(function () {
            console.log("SignalR connected");
        }).catch(function (err) {
            console.error("SignalR connection error: ", err.toString());
        });

        // Define an array of consistent colors
        const consistentColors = ['#FF5733', '#33FF57', '#5733FF', '#FF5733', '#33FF57', '#5733FF'];

        function getNextColor() {
            // Initialize an index to cycle through the colors array
            let colorIndex = 0;
            return function () {
                const color = consistentColors[colorIndex % consistentColors.length];
                colorIndex++;
                return color;
            };
        }

        // Create a function to get the next consistent color
        const getConsistentColor = getNextColor();

        function renderChart() {
            var chartData = @Html.Raw(Json.Serialize(Model.ChartData));
            var ctx = document.getElementById('sensorChart').getContext('2d');
            var datasets = [];

            var minTimestamp = new Date('@Model.MinTimestamp').getTime();
            var maxTimestamp = new Date('@Model.MaxTimestamp').getTime();

            for (var sensorId in chartData) {
                var sensorData = chartData[sensorId];
                var data = sensorData.map(d => {
                    var timestamp = new Date(d.timeStamp);
                    return { x: timestamp, y: d.value ? 1 : 0 };
                });

                datasets.push({
                    label: 'Sensor ' + sensorId,
                    data: data,
                    fill: false,
                    borderColor: getConsistentColor(), // Use consistent colors
                    tension: 0.1,
                    stepped: true
                });
            }

            new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: datasets
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: {
                                    minute: 'HH:mm:ss'
                                }
                            },
                            min: minTimestamp,
                            max: maxTimestamp
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Status'
                            },
                            ticks: {
                                callback: function (value) {
                                    return value === 1 ? 'On' : 'Off';
                                },
                                stepSize: 1,
                                min: 0,
                                max: 1
                            }
                        }
                    }
                }
            });
        }
    </script>
</head>
<body>
    <h1>Your Sensors</h1>
    <div class="filter">
        <label for="gatewayFilter">Filter by Gateway ID:</label>
        <select id="gatewayFilter" onchange="filterSensors()">
            <option value="">All</option>
            <script>
                // Populate options using JavaScript
                var gatewayIds = @Html.Raw(Json.Serialize(Model.GatewayIds));
                var selectedGatewayId = '@(Context.Request.Query["gatewayId"].ToString())';

                gatewayIds.forEach(function (gatewayId) {
                    var option = document.createElement("option");
                    option.value = gatewayId.toString(); // Convert gatewayId to string explicitly
                    option.text = gatewayId.toString(); // Convert gatewayId to string explicitly
                    if (gatewayId.toString() === selectedGatewayId) {
                        option.selected = true;
                    }
                    document.getElementById("gatewayFilter").appendChild(option);
                });
            </script>
        </select>
    </div>
    <div class="sensor-status">
        @if (string.IsNullOrEmpty(Context.Request.Query["gatewayId"]))
        {
            // Display all sensors grouped by gateway
            var groupedSensors = Model.DataList
            .GroupBy(s => new { s.GatewayId, s.SensorId })
            .Select(g => g.OrderByDescending(d => d.TimeStamp).FirstOrDefault())
            .GroupBy(s => s.GatewayId);

            foreach (var group in groupedSensors)
            {
                <div class="gateway-section">
                    <div class="gateway-title">Gateway @group.Key</div>
                    <div class="sensor-list">
                        @foreach (var sensor in group)
                        {
                            var sensorClass = sensor == null ? "gray" : sensor.Value ? "green" : "red";
                            var sensorId = sensor != null ? sensor.SensorId.ToString() : "No Data"; // Ensure sensorId is always string

                            <div class="sensor @sensorClass">@sensorId</div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            // Display sensors filtered by selected gateway
            var filteredSensors = Model.DataList
            .Where(s => s.GatewayId.ToString() == Context.Request.Query["gatewayId"].ToString())
            .GroupBy(s => s.SensorId)
            .Select(g => g.OrderByDescending(d => d.TimeStamp).FirstOrDefault());

            <div class="gateway-section">
                <div class="sensor-list">
                    @foreach (var sensor in filteredSensors)
                    {
                        var sensorClass = sensor == null ? "gray" : sensor.Value ? "green" : "red";
                        var sensorId = sensor != null ? sensor.SensorId.ToString() : "No Data"; // Ensure sensorId is always string

                        <div class="sensor @sensorClass">@sensorId</div>
                    }
                </div>
            </div>

            <div id="chartContainer">
                <canvas id="sensorChart" class="chart"></canvas>
            </div>
        }
    </div>
</body>
</html>
